/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as ArtistsRouteImport } from './routes/artists'
import { Route as IndexRouteImport } from './routes/index'
import { Route as OrganizationOrganizationViewRouteImport } from './routes/organization.$organizationView'
import { Route as AuthAuthViewRouteImport } from './routes/auth.$authView'
import { Route as ArtistsIdRouteImport } from './routes/artists_.$id'
import { Route as AlbumsIdRouteImport } from './routes/albums_.$id'
import { Route as AdminSystemSettingsRouteImport } from './routes/admin.systemSettings'
import { Route as AccountAccountViewRouteImport } from './routes/account.$accountView'
import { ServerRoute as ApiSplatServerRouteImport } from './routes/api.$'
import { ServerRoute as ApiRpcSplatServerRouteImport } from './routes/api.rpc.$'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api.auth.$'

const rootServerRouteImport = createServerRootRoute()

const ArtistsRoute = ArtistsRouteImport.update({
  id: '/artists',
  path: '/artists',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganizationOrganizationViewRoute =
  OrganizationOrganizationViewRouteImport.update({
    id: '/organization/$organizationView',
    path: '/organization/$organizationView',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthAuthViewRoute = AuthAuthViewRouteImport.update({
  id: '/auth/$authView',
  path: '/auth/$authView',
  getParentRoute: () => rootRouteImport,
} as any)
const ArtistsIdRoute = ArtistsIdRouteImport.update({
  id: '/artists_/$id',
  path: '/artists/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const AlbumsIdRoute = AlbumsIdRouteImport.update({
  id: '/albums_/$id',
  path: '/albums/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminSystemSettingsRoute = AdminSystemSettingsRouteImport.update({
  id: '/admin/systemSettings',
  path: '/admin/systemSettings',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountAccountViewRoute = AccountAccountViewRouteImport.update({
  id: '/account/$accountView',
  path: '/account/$accountView',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiSplatServerRoute = ApiSplatServerRouteImport.update({
  id: '/api/$',
  path: '/api/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiRpcSplatServerRoute = ApiRpcSplatServerRouteImport.update({
  id: '/api/rpc/$',
  path: '/api/rpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/artists': typeof ArtistsRoute
  '/account/$accountView': typeof AccountAccountViewRoute
  '/admin/systemSettings': typeof AdminSystemSettingsRoute
  '/albums/$id': typeof AlbumsIdRoute
  '/artists/$id': typeof ArtistsIdRoute
  '/auth/$authView': typeof AuthAuthViewRoute
  '/organization/$organizationView': typeof OrganizationOrganizationViewRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/artists': typeof ArtistsRoute
  '/account/$accountView': typeof AccountAccountViewRoute
  '/admin/systemSettings': typeof AdminSystemSettingsRoute
  '/albums/$id': typeof AlbumsIdRoute
  '/artists/$id': typeof ArtistsIdRoute
  '/auth/$authView': typeof AuthAuthViewRoute
  '/organization/$organizationView': typeof OrganizationOrganizationViewRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/artists': typeof ArtistsRoute
  '/account/$accountView': typeof AccountAccountViewRoute
  '/admin/systemSettings': typeof AdminSystemSettingsRoute
  '/albums_/$id': typeof AlbumsIdRoute
  '/artists_/$id': typeof ArtistsIdRoute
  '/auth/$authView': typeof AuthAuthViewRoute
  '/organization/$organizationView': typeof OrganizationOrganizationViewRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/artists'
    | '/account/$accountView'
    | '/admin/systemSettings'
    | '/albums/$id'
    | '/artists/$id'
    | '/auth/$authView'
    | '/organization/$organizationView'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/artists'
    | '/account/$accountView'
    | '/admin/systemSettings'
    | '/albums/$id'
    | '/artists/$id'
    | '/auth/$authView'
    | '/organization/$organizationView'
  id:
    | '__root__'
    | '/'
    | '/artists'
    | '/account/$accountView'
    | '/admin/systemSettings'
    | '/albums_/$id'
    | '/artists_/$id'
    | '/auth/$authView'
    | '/organization/$organizationView'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ArtistsRoute: typeof ArtistsRoute
  AccountAccountViewRoute: typeof AccountAccountViewRoute
  AdminSystemSettingsRoute: typeof AdminSystemSettingsRoute
  AlbumsIdRoute: typeof AlbumsIdRoute
  ArtistsIdRoute: typeof ArtistsIdRoute
  AuthAuthViewRoute: typeof AuthAuthViewRoute
  OrganizationOrganizationViewRoute: typeof OrganizationOrganizationViewRoute
}
export interface FileServerRoutesByFullPath {
  '/api/$': typeof ApiSplatServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/$': typeof ApiSplatServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/$': typeof ApiSplatServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/$' | '/api/auth/$' | '/api/rpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/$' | '/api/auth/$' | '/api/rpc/$'
  id: '__root__' | '/api/$' | '/api/auth/$' | '/api/rpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiSplatServerRoute: typeof ApiSplatServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiRpcSplatServerRoute: typeof ApiRpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/artists': {
      id: '/artists'
      path: '/artists'
      fullPath: '/artists'
      preLoaderRoute: typeof ArtistsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/organization/$organizationView': {
      id: '/organization/$organizationView'
      path: '/organization/$organizationView'
      fullPath: '/organization/$organizationView'
      preLoaderRoute: typeof OrganizationOrganizationViewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/$authView': {
      id: '/auth/$authView'
      path: '/auth/$authView'
      fullPath: '/auth/$authView'
      preLoaderRoute: typeof AuthAuthViewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/artists_/$id': {
      id: '/artists_/$id'
      path: '/artists/$id'
      fullPath: '/artists/$id'
      preLoaderRoute: typeof ArtistsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/albums_/$id': {
      id: '/albums_/$id'
      path: '/albums/$id'
      fullPath: '/albums/$id'
      preLoaderRoute: typeof AlbumsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/systemSettings': {
      id: '/admin/systemSettings'
      path: '/admin/systemSettings'
      fullPath: '/admin/systemSettings'
      preLoaderRoute: typeof AdminSystemSettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account/$accountView': {
      id: '/account/$accountView'
      path: '/account/$accountView'
      fullPath: '/account/$accountView'
      preLoaderRoute: typeof AccountAccountViewRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/$': {
      id: '/api/$'
      path: '/api/$'
      fullPath: '/api/$'
      preLoaderRoute: typeof ApiSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/rpc/$': {
      id: '/api/rpc/$'
      path: '/api/rpc/$'
      fullPath: '/api/rpc/$'
      preLoaderRoute: typeof ApiRpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ArtistsRoute: ArtistsRoute,
  AccountAccountViewRoute: AccountAccountViewRoute,
  AdminSystemSettingsRoute: AdminSystemSettingsRoute,
  AlbumsIdRoute: AlbumsIdRoute,
  ArtistsIdRoute: ArtistsIdRoute,
  AuthAuthViewRoute: AuthAuthViewRoute,
  OrganizationOrganizationViewRoute: OrganizationOrganizationViewRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiSplatServerRoute: ApiSplatServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiRpcSplatServerRoute: ApiRpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
