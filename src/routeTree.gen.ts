/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SearchIndexRouteImport } from './routes/search/index'
import { Route as PlaylistsIndexRouteImport } from './routes/playlists/index'
import { Route as ArtistsIndexRouteImport } from './routes/artists/index'
import { Route as AlbumsIndexRouteImport } from './routes/albums/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as PlaylistsNewRouteImport } from './routes/playlists/new'
import { Route as PlaylistsIdRouteImport } from './routes/playlists/$id'
import { Route as AuthAuthViewRouteImport } from './routes/auth.$authView'
import { Route as ArtistsIdRouteImport } from './routes/artists/$id'
import { Route as ApiSplatRouteImport } from './routes/api/$'
import { Route as AlbumsIdRouteImport } from './routes/albums/$id'
import { Route as PlaylistsIdEditRouteImport } from './routes/playlists/$id_.edit'
import { Route as ApiRpcSplatRouteImport } from './routes/api/rpc.$'
import { Route as ApiMediaIdRouteImport } from './routes/api/media.$id'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth.$'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchIndexRoute = SearchIndexRouteImport.update({
  id: '/search/',
  path: '/search/',
  getParentRoute: () => rootRouteImport,
} as any)
const PlaylistsIndexRoute = PlaylistsIndexRouteImport.update({
  id: '/playlists/',
  path: '/playlists/',
  getParentRoute: () => rootRouteImport,
} as any)
const ArtistsIndexRoute = ArtistsIndexRouteImport.update({
  id: '/artists/',
  path: '/artists/',
  getParentRoute: () => rootRouteImport,
} as any)
const AlbumsIndexRoute = AlbumsIndexRouteImport.update({
  id: '/albums/',
  path: '/albums/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any)
const PlaylistsNewRoute = PlaylistsNewRouteImport.update({
  id: '/playlists/new',
  path: '/playlists/new',
  getParentRoute: () => rootRouteImport,
} as any)
const PlaylistsIdRoute = PlaylistsIdRouteImport.update({
  id: '/playlists/$id',
  path: '/playlists/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthAuthViewRoute = AuthAuthViewRouteImport.update({
  id: '/auth/$authView',
  path: '/auth/$authView',
  getParentRoute: () => rootRouteImport,
} as any)
const ArtistsIdRoute = ArtistsIdRouteImport.update({
  id: '/artists/$id',
  path: '/artists/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiSplatRoute = ApiSplatRouteImport.update({
  id: '/api/$',
  path: '/api/$',
  getParentRoute: () => rootRouteImport,
} as any)
const AlbumsIdRoute = AlbumsIdRouteImport.update({
  id: '/albums/$id',
  path: '/albums/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const PlaylistsIdEditRoute = PlaylistsIdEditRouteImport.update({
  id: '/playlists/$id_/edit',
  path: '/playlists/$id/edit',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiRpcSplatRoute = ApiRpcSplatRouteImport.update({
  id: '/api/rpc/$',
  path: '/api/rpc/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiMediaIdRoute = ApiMediaIdRouteImport.update({
  id: '/api/media/$id',
  path: '/api/media/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/albums/$id': typeof AlbumsIdRoute
  '/api/$': typeof ApiSplatRoute
  '/artists/$id': typeof ArtistsIdRoute
  '/auth/$authView': typeof AuthAuthViewRoute
  '/playlists/$id': typeof PlaylistsIdRoute
  '/playlists/new': typeof PlaylistsNewRoute
  '/admin': typeof AdminIndexRoute
  '/albums': typeof AlbumsIndexRoute
  '/artists': typeof ArtistsIndexRoute
  '/playlists': typeof PlaylistsIndexRoute
  '/search': typeof SearchIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/media/$id': typeof ApiMediaIdRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
  '/playlists/$id/edit': typeof PlaylistsIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/albums/$id': typeof AlbumsIdRoute
  '/api/$': typeof ApiSplatRoute
  '/artists/$id': typeof ArtistsIdRoute
  '/auth/$authView': typeof AuthAuthViewRoute
  '/playlists/$id': typeof PlaylistsIdRoute
  '/playlists/new': typeof PlaylistsNewRoute
  '/admin': typeof AdminIndexRoute
  '/albums': typeof AlbumsIndexRoute
  '/artists': typeof ArtistsIndexRoute
  '/playlists': typeof PlaylistsIndexRoute
  '/search': typeof SearchIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/media/$id': typeof ApiMediaIdRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
  '/playlists/$id/edit': typeof PlaylistsIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/albums/$id': typeof AlbumsIdRoute
  '/api/$': typeof ApiSplatRoute
  '/artists/$id': typeof ArtistsIdRoute
  '/auth/$authView': typeof AuthAuthViewRoute
  '/playlists/$id': typeof PlaylistsIdRoute
  '/playlists/new': typeof PlaylistsNewRoute
  '/admin/': typeof AdminIndexRoute
  '/albums/': typeof AlbumsIndexRoute
  '/artists/': typeof ArtistsIndexRoute
  '/playlists/': typeof PlaylistsIndexRoute
  '/search/': typeof SearchIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/media/$id': typeof ApiMediaIdRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
  '/playlists/$id_/edit': typeof PlaylistsIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/albums/$id'
    | '/api/$'
    | '/artists/$id'
    | '/auth/$authView'
    | '/playlists/$id'
    | '/playlists/new'
    | '/admin'
    | '/albums'
    | '/artists'
    | '/playlists'
    | '/search'
    | '/api/auth/$'
    | '/api/media/$id'
    | '/api/rpc/$'
    | '/playlists/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/albums/$id'
    | '/api/$'
    | '/artists/$id'
    | '/auth/$authView'
    | '/playlists/$id'
    | '/playlists/new'
    | '/admin'
    | '/albums'
    | '/artists'
    | '/playlists'
    | '/search'
    | '/api/auth/$'
    | '/api/media/$id'
    | '/api/rpc/$'
    | '/playlists/$id/edit'
  id:
    | '__root__'
    | '/'
    | '/albums/$id'
    | '/api/$'
    | '/artists/$id'
    | '/auth/$authView'
    | '/playlists/$id'
    | '/playlists/new'
    | '/admin/'
    | '/albums/'
    | '/artists/'
    | '/playlists/'
    | '/search/'
    | '/api/auth/$'
    | '/api/media/$id'
    | '/api/rpc/$'
    | '/playlists/$id_/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AlbumsIdRoute: typeof AlbumsIdRoute
  ApiSplatRoute: typeof ApiSplatRoute
  ArtistsIdRoute: typeof ArtistsIdRoute
  AuthAuthViewRoute: typeof AuthAuthViewRoute
  PlaylistsIdRoute: typeof PlaylistsIdRoute
  PlaylistsNewRoute: typeof PlaylistsNewRoute
  AdminIndexRoute: typeof AdminIndexRoute
  AlbumsIndexRoute: typeof AlbumsIndexRoute
  ArtistsIndexRoute: typeof ArtistsIndexRoute
  PlaylistsIndexRoute: typeof PlaylistsIndexRoute
  SearchIndexRoute: typeof SearchIndexRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
  ApiMediaIdRoute: typeof ApiMediaIdRoute
  ApiRpcSplatRoute: typeof ApiRpcSplatRoute
  PlaylistsIdEditRoute: typeof PlaylistsIdEditRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search/': {
      id: '/search/'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/playlists/': {
      id: '/playlists/'
      path: '/playlists'
      fullPath: '/playlists'
      preLoaderRoute: typeof PlaylistsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/artists/': {
      id: '/artists/'
      path: '/artists'
      fullPath: '/artists'
      preLoaderRoute: typeof ArtistsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/albums/': {
      id: '/albums/'
      path: '/albums'
      fullPath: '/albums'
      preLoaderRoute: typeof AlbumsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/playlists/new': {
      id: '/playlists/new'
      path: '/playlists/new'
      fullPath: '/playlists/new'
      preLoaderRoute: typeof PlaylistsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/playlists/$id': {
      id: '/playlists/$id'
      path: '/playlists/$id'
      fullPath: '/playlists/$id'
      preLoaderRoute: typeof PlaylistsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/$authView': {
      id: '/auth/$authView'
      path: '/auth/$authView'
      fullPath: '/auth/$authView'
      preLoaderRoute: typeof AuthAuthViewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/artists/$id': {
      id: '/artists/$id'
      path: '/artists/$id'
      fullPath: '/artists/$id'
      preLoaderRoute: typeof ArtistsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/$': {
      id: '/api/$'
      path: '/api/$'
      fullPath: '/api/$'
      preLoaderRoute: typeof ApiSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/albums/$id': {
      id: '/albums/$id'
      path: '/albums/$id'
      fullPath: '/albums/$id'
      preLoaderRoute: typeof AlbumsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/playlists/$id_/edit': {
      id: '/playlists/$id_/edit'
      path: '/playlists/$id/edit'
      fullPath: '/playlists/$id/edit'
      preLoaderRoute: typeof PlaylistsIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/rpc/$': {
      id: '/api/rpc/$'
      path: '/api/rpc/$'
      fullPath: '/api/rpc/$'
      preLoaderRoute: typeof ApiRpcSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/media/$id': {
      id: '/api/media/$id'
      path: '/api/media/$id'
      fullPath: '/api/media/$id'
      preLoaderRoute: typeof ApiMediaIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AlbumsIdRoute: AlbumsIdRoute,
  ApiSplatRoute: ApiSplatRoute,
  ArtistsIdRoute: ArtistsIdRoute,
  AuthAuthViewRoute: AuthAuthViewRoute,
  PlaylistsIdRoute: PlaylistsIdRoute,
  PlaylistsNewRoute: PlaylistsNewRoute,
  AdminIndexRoute: AdminIndexRoute,
  AlbumsIndexRoute: AlbumsIndexRoute,
  ArtistsIndexRoute: ArtistsIndexRoute,
  PlaylistsIndexRoute: PlaylistsIndexRoute,
  SearchIndexRoute: SearchIndexRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
  ApiMediaIdRoute: ApiMediaIdRoute,
  ApiRpcSplatRoute: ApiRpcSplatRoute,
  PlaylistsIdEditRoute: PlaylistsIdEditRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
